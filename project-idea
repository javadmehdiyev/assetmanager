Host Discovery Techniques for Network Scanning
Introduction
Host discovery is a critical step in network scanning, allowing you to identify active devices on a network. This document outlines various techniques for host discovery, which can be implemented in a custom network scanning tool. These techniques leverage different protocols and methods to detect live hosts, even in environments with restrictive firewalls or filtering mechanisms.

1. ICMP Echo Request (Ping)
Purpose
To determine if a host is online by sending an ICMP echo request (ping) and waiting for a response.

Method
Send an ICMP echo request packet to the target IP address.

If the target is online and not blocking ICMP traffic, it will respond with an ICMP echo reply.

Use Case
Effective for basic host discovery in networks where ICMP is allowed.

Often blocked by firewalls or security configurations.

2. TCP SYN Ping
Purpose
To detect live hosts by sending a TCP SYN packet to a specific port and analyzing the response.

Method
Send a TCP SYN packet to a target port (commonly port 80 or 443).

If the target responds with a SYN/ACK or RST packet, it is considered online.

Use Case
Useful for discovering hosts that block ICMP but allow TCP traffic.

Can be customized to target specific ports.

3. TCP ACK Ping
Purpose
To identify live hosts by sending a TCP ACK packet and analyzing the response.

Method
Send a TCP ACK packet to a target port.

If the target responds with an RST packet, it is considered online.

Use Case
Effective for bypassing stateless firewalls that allow established connections.

Often used in conjunction with other techniques.

4. UDP Ping
Purpose
To detect hosts that respond to UDP packets.

Method
Send a UDP packet to a target port.

If the target responds with an ICMP port unreachable error, it is considered online.

Use Case
Useful for discovering hosts that do not respond to ICMP or TCP probes.

Requires careful selection of ports to avoid false negatives.

5. ARP Ping
Purpose
To discover hosts on a local network using ARP requests.

Method
Send an ARP request to the target IP address.

If the target responds with an ARP reply, it is considered online.

Use Case
Highly effective for local network scanning.

ARP is a low-level protocol and is rarely blocked.

6. ICMP Timestamp Request
Purpose
To detect live hosts using ICMP timestamp requests.

Method
Send an ICMP timestamp request to the target IP address.

If the target responds with an ICMP timestamp reply, it is considered online.

Use Case
Useful as an alternative to ICMP echo requests in environments where echo requests are blocked.

7. ICMP Address Mask Request
Purpose
To identify live hosts using ICMP address mask requests.

Method
Send an ICMP address mask request to the target IP address.

If the target responds with an ICMP address mask reply, it is considered online.

Use Case
Rarely used but can be effective in specific scenarios where other ICMP methods are blocked.

8. SCTP INIT Ping
Purpose
To detect live hosts using SCTP (Stream Control Transmission Protocol) INIT chunks.

Method
Send an SCTP INIT chunk to the target IP address.

If the target responds with an INIT-ACK chunk, it is considered online.

Use Case
Useful for discovering hosts that support SCTP, a less common protocol.

9. IP Protocol Ping
Purpose
To determine which IP protocols (e.g., TCP, UDP, ICMP) are supported by the target.

Method
Send packets with different IP protocol numbers to the target.

If the target responds, it is considered online.

Use Case
Useful for advanced host discovery in environments with complex filtering rules.

10. Combination of Techniques
Purpose
To increase the likelihood of discovering hosts by using multiple techniques.

Method
Combine ICMP, TCP, UDP, and ARP probes in a single scan.

Analyze responses from all techniques to determine if a host is online.

Use Case
Ideal for comprehensive host discovery in networks with varying levels of filtering and security.

Implementation Considerations
Timeout and Retries:

Set appropriate timeouts for each probe to avoid long scan times.

Implement retries for probes that may be dropped or lost.

Parallelism:

Use parallel processing to send multiple probes simultaneously and improve scan speed.

Error Handling:

Handle network errors, such as unreachable hosts or dropped packets, gracefully.

Customization:

Allow users to specify which techniques to use (e.g., ICMP only, TCP only, or a combination).

Output Format:

Provide clear and concise output, indicating which hosts are online and the technique used to discover them.

Example Workflow
Input: A list of target IP addresses or a subnet range.

Probing:

Send ARP requests for local targets.

Send ICMP echo requests for remote targets.

Send TCP SYN packets to common ports (e.g., 80, 443).

Send UDP packets to common ports (e.g., 53, 123).

Analysis:

Collect and analyze responses.

Mark hosts as online if they respond to any probe.

Output:

Display a list of live hosts and the techniques that detected them.

Conclusion
By implementing these host discovery techniques, your custom network scanning tool can effectively identify active devices on a network. Combining multiple methods ensures robust detection, even in environments with restrictive firewalls or filtering mechanisms. Tailor the implementation to your specific use case, and consider adding advanced features like parallelism and customizable probing for optimal performance.

This document provides a foundation for building a host discovery tool. You can expand upon these techniques and add features to suit your needs.